{
  "coordinator": {
    "role": "deno_migration_orchestrator",
    "version": "1.0.0",
    "responsibilities": [
      "Monitor Deno cache utilization",
      "Manage test suite exclusivity",
      "Track git repository locks",
      "Assign tasks based on TypeScript/Deno expertise",
      "Enforce dependency chains for Command hierarchy",
      "Handle Edge Function testing coordination",
      "Manage binary compilation resources"
    ],
    
    "state_management": {
      "task_states": {
        "blocked": "Dependencies not met or resources unavailable",
        "ready": "In frontier, dependencies met, awaiting resources",
        "queued": "Resources available, awaiting worker assignment",
        "assigned": "Assigned to worker with required capabilities",
        "running": "Actively executing migration",
        "paused": "Temporarily suspended for resource contention",
        "checkpointed": "At a checkpoint, can resume if failed",
        "completed": "Successfully migrated to Deno",
        "failed": "Migration failed, rollback may be needed",
        "rolled_back": "Reverted to Node.js implementation"
      },
      
      "frontier_management": {
        "ready_queue": [],
        "resource_wait_queue": [],
        "worker_assignments": {},
        "resource_allocations": {
          "git_repository": null,
          "test_suite": null,
          "deno_cache": []
        },
        "checkpoint_registry": {}
      }
    },
    
    "scheduling_loop": {
      "interval_ms": 500,
      "steps": [
        "update_frontier()",
        "check_deno_cache_capacity()",
        "check_test_suite_availability()",
        "prioritize_critical_path_tasks()",
        "match_tasks_to_specialized_workers()",
        "dispatch_migration_tasks()",
        "monitor_type_checking()",
        "handle_completions()",
        "update_migration_metrics()"
      ]
    },
    
    "policies": {
      "backpressure": {
        "triggers": [
          {"metric": "deno_cache_contention", "threshold": 3, "action": "defer_low_priority"},
          {"metric": "type_check_failures", "threshold": 5, "action": "pause_dependent_tasks"},
          {"metric": "test_failures", "threshold": 3, "action": "circuit_break"},
          {"metric": "memory_usage", "threshold": 80, "action": "defer_compilation"}
        ],
        "recovery": {
          "cool_down_seconds": 20,
          "gradual_resume": true,
          "resume_rate": 2
        }
      },
      
      "resource_allocation": {
        "strategy": "critical_path_priority",
        "headroom_percent": 15,
        "oversubscription_allowed": false,
        "preemption_enabled": true,
        "preemption_priorities": ["optional", "standard", "critical", "foundation"]
      },
      
      "worker_matching": {
        "strategy": "expertise_and_load_balanced",
        "prefer_specialized_workers": true,
        "max_tasks_per_worker": 2,
        "expertise_matrix": {
          "deno_expert": ["P1.T001", "P1.T002", "P1.T010", "P1.T011"],
          "typescript_expert": ["P1.T002", "P1.T005", "P1.T006", "P1.T014"],
          "testing_expert": ["P1.T007", "P1.T009", "P1.T010"],
          "database_expert": ["P1.T005", "P1.T008"],
          "ci_cd_expert": ["P1.T011", "P1.T013"]
        }
      },
      
      "failure_handling": {
        "retry_policy": "exponential_backoff",
        "max_retries": 3,
        "failure_threshold": 0.2,
        "cascade_prevention": true,
        "checkpoint_recovery": true,
        "rollback_strategy": "task_level_git_revert"
      }
    },
    
    "monitoring": {
      "metrics_collection_interval": 10,
      "metrics": [
        "tasks_migrated_count",
        "typescript_compilation_time",
        "test_pass_rate",
        "edge_function_import_success",
        "binary_size_mb",
        "migration_velocity"
      ],
      "alerts": [
        {
          "condition": "type_check_failures > 5",
          "action": "pause_migration",
          "notify": "logs/migration-alerts.log"
        },
        {
          "condition": "test_pass_rate < 0.90",
          "action": "review_required",
          "notify": "logs/test-alerts.log"
        },
        {
          "condition": "binary_size_mb > 50",
          "action": "optimization_needed",
          "notify": "logs/size-alerts.log"
        }
      ]
    },
    
    "migration_specific": {
      "critical_tasks": ["P1.T001", "P1.T002", "P1.T010"],
      "validation_gates": {
        "after_P1.T002": "Verify Command event emission works",
        "after_P1.T007": "Verify pgTAP execution succeeds",
        "after_P1.T010": "Verify Edge Function import works",
        "after_P1.T011": "Verify binary under 50MB",
        "after_P1.T015": "Full system validation"
      },
      "rollback_points": {
        "P1.T001": "Cannot rollback - foundation",
        "P1.T002": "git checkout HEAD -- src/lib/Command.js",
        "P1.T005": "git checkout HEAD -- src/lib/DatabaseCommand.js",
        "P1.T014": "git checkout HEAD -- src/commands/"
      }
    }
  },
  
  "worker_pool": {
    "min_workers": 2,
    "max_workers": 6,
    "scaling_policy": "adaptive",
    "worker_template": {
      "capabilities": ["deno", "typescript", "backend", "testing", "database", "ci-cd"],
      "resource_capacity": {
        "cpu_cores": 2,
        "memory_mb": 4096,
        "disk_io_mbps": 50
      },
      "execution_protocol": {
        "heartbeat_interval": 30,
        "progress_updates": true,
        "can_checkpoint": true,
        "type_check_before_commit": true
      }
    },
    "specialized_workers": [
      {
        "id": "deno-specialist",
        "expertise": ["deno", "edge-functions", "compilation"],
        "preferred_tasks": ["P1.T001", "P1.T010", "P1.T011"],
        "capacity_multiplier": 1.5
      },
      {
        "id": "migration-expert",
        "expertise": ["typescript", "node-to-deno", "refactoring"],
        "preferred_tasks": ["P1.T002", "P1.T014"],
        "capacity_multiplier": 1.3
      },
      {
        "id": "test-engineer",
        "expertise": ["testing", "vitest", "deno-test"],
        "preferred_tasks": ["P1.T007", "P1.T009"],
        "capacity_multiplier": 1.2
      }
    ]
  },
  
  "execution_constraints": {
    "must_complete_in_order": [
      ["P1.T001", "P1.T002"],
      ["P1.T014", "P1.T011", "P1.T015"]
    ],
    "cannot_run_simultaneously": [
      ["P1.T001", "P1.T013", "P1.T015"],
      ["P1.T007", "P1.T009"]
    ],
    "resource_exclusive_groups": {
      "git_operations": ["P1.T001", "P1.T013", "P1.T015"],
      "test_modifications": ["P1.T007", "P1.T009", "P1.T015"]
    }
  },
  
  "contingency_plans": {
    "if_task_fails": {
      "P1.T001": "ABORT - Cannot proceed without Deno setup",
      "P1.T002": "ABORT - Command base critical for all migrations",
      "P1.T010": "RETRY with debugging - Core migration goal",
      "P1.T011": "CONTINUE - Can distribute source instead",
      "default": "RETRY up to 3 times, then SKIP if optional"
    },
    "if_resource_exhausted": {
      "deno_cache": "Clear cache and retry",
      "memory": "Reduce worker pool size",
      "disk": "Clean up temporary files"
    }
  }
}