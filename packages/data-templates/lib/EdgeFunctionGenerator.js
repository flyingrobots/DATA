/**
 * @fileoverview Edge Function generator for Supabase with Deno runtime
 * Creates complete Edge Function projects with proper Web API patterns
 */

import { TemplateEngine } from './TemplateEngine.js';

/**
 * Edge Function project generator
 * Creates complete Supabase Edge Functions using Web API standards
 */
export class EdgeFunctionGenerator {
  constructor() {
    this.templateEngine = new TemplateEngine();
    this.defaultConfig = {
      runtime: 'deno',
      typescript: true,
      cors: true,
      jwtVerification: false,
      rateLimit: false,
      supabaseIntegration: true,
      errorHandling: true
    };
  }

  /**
   * Generate an Edge Function project
   * @param {Object} options - Generation options
   * @param {string} options.name - Function name
   * @param {string} options.type - Template type (edge-function, database-function, webhook-handler)
   * @param {Object} [options.config] - Configuration overrides
   * @param {string} [options.outputDir] - Output directory path
   * @returns {Promise<Object>} - Generation result with file paths
   */
  async generate(options) {
    const { name, type, config = {}, outputDir = '.' } = options;
    
    if (!name || !type) {
      throw new Error('Function name and type are required');
    }

    const finalConfig = { ...this.defaultConfig, ...config };
    const templateVars = this._createTemplateVariables(name, finalConfig);
    
    this.templateEngine
      .setVariables(templateVars)
      .setConditionals(this._createConditionals(finalConfig));

    const templates = this._getTemplatesForType(type);
    const generatedFiles = [];

    for (const template of templates) {
      const content = this._getTemplateContent(template.name, type);
      const processedContent = this.templateEngine.process(content);
      
      const outputPath = this._resolveOutputPath(outputDir, name, template.filename);
      generatedFiles.push({
        path: outputPath,
        content: processedContent,
        type: template.type
      });
    }

    return {
      functionName: name,
      type,
      config: finalConfig,
      files: generatedFiles,
      totalFiles: generatedFiles.length
    };
  }

  /**
   * Create template variables for substitution
   * @private
   */
  _createTemplateVariables(name, config) {
    return {
      functionName: name,
      functionNameCamel: this._toCamelCase(name),
      functionNamePascal: this._toPascalCase(name),
      functionNameKebab: this._toKebabCase(name),
      timestamp: new Date().toISOString(),
      denoVersion: '>=1.40.0',
      corsOrigins: config.corsOrigins || ['*'],
      defaultTimeout: config.timeout || 30,
      description: config.description || `Supabase Edge Function: ${name}`,
      author: config.author || 'DATA CLI'
    };
  }

  /**
   * Create conditional flags for template processing
   * @private
   */
  _createConditionals(config) {
    return {
      typescript: config.typescript,
      cors: config.cors,
      jwtVerification: config.jwtVerification,
      rateLimit: config.rateLimit,
      supabaseIntegration: config.supabaseIntegration,
      errorHandling: config.errorHandling,
      logging: config.logging !== false,
      validation: config.validation !== false
    };
  }

  /**
   * Get template definitions for function type
   * @private
   */
  _getTemplatesForType(type) {
    const templates = {
      'edge-function': [
        { name: 'index', filename: 'index.ts', type: 'main' },
        { name: 'readme', filename: 'README.md', type: 'docs' },
        { name: 'config', filename: 'deno.json', type: 'config' }
      ],
      'database-function': [
        { name: 'database', filename: 'index.ts', type: 'main' }
      ],
      'webhook-handler': [
        { name: 'webhook', filename: 'index.ts', type: 'main' }
      ]
    };

    const templateList = templates[type];
    if (!templateList) {
      throw new Error(`Unknown template type: ${type}`);
    }

    return templateList;
  }

  /**
   * Get template content by name and type
   * This would normally load from template files
   * @private
   */
  _getTemplateContent(templateName, functionType) {
    // In a real implementation, this would load from template files
    // For now, return inline templates
    const templates = this._getInlineTemplates();
    return templates[functionType]?.[templateName] || '';
  }

  /**
   * Get inline template definitions
   * @private
   */
  _getInlineTemplates() {
    return {
      'edge-function': {
        index: `// {{description}}
// Generated by DATA CLI on {{timestamp}}

{{#if supabaseIntegration}}
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
{{/if}}

{{#if jwtVerification}}
import { verify } from 'https://deno.land/x/djwt@v3.0.0/mod.ts'
{{/if}}

{{#if cors}}
const corsHeaders = {
  'Access-Control-Allow-Origin': '{{corsOrigins.0}}',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}
{{/if}}

{{#if supabaseIntegration}}
// Initialize Supabase client
const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!
const supabase = createClient(supabaseUrl, supabaseKey)
{{/if}}

Deno.serve(async (req: Request): Promise<Response> => {
  {{#if cors}}
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  {{/if}}

  try {
    {{#if jwtVerification}}
    // Verify JWT token
    const authHeader = req.headers.get('Authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      return new Response(
        JSON.stringify({ error: 'Missing or invalid authorization header' }),
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        }
      )
    }
    {{/if}}

    {{#if rateLimit}}
    // Basic rate limiting (implement with external store in production)
    const clientIP = req.headers.get('x-forwarded-for') || 'unknown'
    console.log(\`Request from: \${clientIP}\`)
    {{/if}}

    // Main function logic
    const { method, url } = req
    console.log(\`{{functionName}}: \${method} \${url}\`)

    if (method === 'POST') {
      const body = await req.json()
      {{#if validation}}
      
      // Validate request body
      if (!body) {
        return new Response(
          JSON.stringify({ error: 'Request body is required' }),
          { 
            status: 400,
            headers: { 'Content-Type': 'application/json', ...corsHeaders }
          }
        )
      }
      {{/if}}

      {{#if supabaseIntegration}}
      // Example: Query Supabase
      const { data, error } = await supabase
        .from('your_table')
        .select('*')
        .limit(10)

      if (error) {
        console.error('Database error:', error)
        return new Response(
          JSON.stringify({ error: 'Database query failed' }),
          { 
            status: 500,
            headers: { 'Content-Type': 'application/json', ...corsHeaders }
          }
        )
      }
      {{/if}}

      // Process the request
      const result = {
        message: 'Hello from {{functionName}}!',
        timestamp: new Date().toISOString(),
        {{#if supabaseIntegration}}
        data: data || [],
        {{/if}}
        body
      }

      return new Response(
        JSON.stringify(result),
        { 
          status: 200,
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        }
      )
    }

    return new Response(
      JSON.stringify({ error: 'Method not allowed' }),
      { 
        status: 405,
        headers: { 'Content-Type': 'application/json', ...corsHeaders }
      }
    )

  } catch (error) {
    {{#if errorHandling}}
    console.error('{{functionName}} error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        message: error.message 
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json', ...corsHeaders }
      }
    )
    {{/if}}
  }
})`,
        
        readme: `# {{functionName}}

{{description}}

## Overview

This Edge Function runs on Deno and uses Web APIs exclusively. It provides:

{{#if cors}}
- CORS support for browser requests
{{/if}}
{{#if jwtVerification}}
- JWT token verification
{{/if}}
{{#if rateLimit}}
- Basic rate limiting
{{/if}}
{{#if supabaseIntegration}}
- Supabase database integration
{{/if}}
{{#if errorHandling}}
- Comprehensive error handling
{{/if}}

## Local Development

\`\`\`bash
# Serve locally using Supabase CLI
supabase functions serve {{functionNameKebab}}

# Deploy to remote
supabase functions deploy {{functionNameKebab}}
\`\`\`

## Environment Variables

\`\`\`bash
{{#if supabaseIntegration}}
SUPABASE_URL=your-project-url
SUPABASE_ANON_KEY=your-anon-key
{{/if}}
\`\`\`

## API Usage

\`\`\`bash
# POST request example
curl -X POST 'http://localhost:54321/functions/v1/{{functionNameKebab}}' \\
  -H 'Authorization: Bearer YOUR_TOKEN' \\
  -H 'Content-Type: application/json' \\
  -d '{"message": "Hello World"}'
\`\`\`

Generated by DATA CLI on {{timestamp}}`,

        config: `{
  "compilerOptions": {
    "allowJs": true,
    "lib": ["deno.window"],
    "strict": true
  },
  "imports": {
    "supabase": "https://esm.sh/@supabase/supabase-js@2"{{#if jwtVerification}},
    "djwt": "https://deno.land/x/djwt@v3.0.0/mod.ts"{{/if}}
  }
}`
      },

      'database-function': {
        database: `// Database-focused Edge Function
// Generated by DATA CLI on {{timestamp}}

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

Deno.serve(async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: { 'Access-Control-Allow-Origin': '*' } })
  }

  try {
    const { action, table, data } = await req.json()

    switch (action) {
      case 'select':
        const { data: selectData, error: selectError } = await supabase
          .from(table)
          .select('*')
        
        if (selectError) throw selectError
        return new Response(JSON.stringify(selectData))

      case 'insert':
        const { data: insertData, error: insertError } = await supabase
          .from(table)
          .insert(data)
          .select()
        
        if (insertError) throw insertError
        return new Response(JSON.stringify(insertData))

      default:
        return new Response(
          JSON.stringify({ error: 'Unsupported action' }),
          { status: 400 }
        )
    }
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500 }
    )
  }
})`
      },

      'webhook-handler': {
        webhook: `// Webhook Handler Edge Function
// Generated by DATA CLI on {{timestamp}}

{{#if supabaseIntegration}}
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_ANON_KEY')!
)
{{/if}}

Deno.serve(async (req: Request): Promise<Response> => {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 })
  }

  try {
    // Verify webhook signature if needed
    const signature = req.headers.get('X-Signature')
    const payload = await req.text()
    
    {{#if validation}}
    if (!signature) {
      return new Response('Missing signature', { status: 401 })
    }
    {{/if}}

    // Parse the webhook payload
    const webhookData = JSON.parse(payload)
    console.log('Webhook received:', webhookData)

    {{#if supabaseIntegration}}
    // Store webhook event
    const { error } = await supabase
      .from('webhook_events')
      .insert({
        source: '{{functionName}}',
        payload: webhookData,
        received_at: new Date().toISOString()
      })

    if (error) {
      console.error('Failed to store webhook:', error)
    }
    {{/if}}

    // Process webhook data here
    // Add your business logic

    return new Response(
      JSON.stringify({ 
        success: true,
        processed_at: new Date().toISOString()
      }),
      { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      }
    )

  } catch (error) {
    console.error('Webhook processing error:', error)
    
    return new Response(
      JSON.stringify({ error: 'Processing failed' }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
})`
      }
    };
  }

  /**
   * Resolve output file path
   * @private
   */
  _resolveOutputPath(outputDir, functionName, filename) {
    const kebabName = this._toKebabCase(functionName);
    return `${outputDir}/${kebabName}/${filename}`;
  }

  // String transformation utilities
  _toCamelCase(str) {
    return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
  }

  _toPascalCase(str) {
    return str.charAt(0).toUpperCase() + this._toCamelCase(str).slice(1);
  }

  _toKebabCase(str) {
    return str.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);
  }
}