# {{functionName}}

{{description}}

**Generated by DATA CLI on {{timestamp}}**

## Overview

This Supabase Edge Function runs on the Deno runtime and uses Web APIs exclusively. No Node.js built-ins are used, ensuring compatibility with the Edge Functions environment.

### Features

{{#if cors}}
- ✅ CORS support for browser requests
{{/if}}
{{#if jwtVerification}}
- ✅ JWT token verification and user authentication
{{/if}}
{{#if rateLimit}}
- ✅ In-memory rate limiting ({{RATE_LIMIT_MAX}} requests per minute)
{{/if}}
{{#if supabaseIntegration}}
- ✅ Supabase database integration via PostgREST API
{{/if}}
{{#if errorHandling}}
- ✅ Comprehensive error handling with proper HTTP status codes
{{/if}}
{{#if validation}}
- ✅ Request validation and type checking
{{/if}}
{{#if logging}}
- ✅ Structured logging with performance metrics
{{/if}}

## Environment Variables

Set these in your Supabase project settings:

```bash
{{#if supabaseIntegration}}
# Supabase Configuration (Auto-provided by Supabase)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key

# For database operations requiring elevated privileges
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
{{/if}}

{{#if jwtVerification}}
# JWT Configuration
JWT_SECRET=your-jwt-secret-key
{{/if}}

# Custom Environment Variables
FUNCTION_TIMEOUT={{defaultTimeout}}
LOG_LEVEL=info
```

## Local Development

### Prerequisites

- [Supabase CLI](https://supabase.com/docs/guides/cli/getting-started) installed
- Deno {{denoVersion}} or higher

### Running Locally

```bash
# Start Supabase services
supabase start

# Serve the function locally
supabase functions serve {{functionNameKebab}} --no-verify-jwt

# Or with JWT verification enabled
supabase functions serve {{functionNameKebab}}
```

The function will be available at:
```
http://localhost:54321/functions/v1/{{functionNameKebab}}
```

### Testing

```bash
{{#if cors}}
# Basic GET request
curl 'http://localhost:54321/functions/v1/{{functionNameKebab}}'
{{/if}}

# POST request with JSON data
curl -X POST 'http://localhost:54321/functions/v1/{{functionNameKebab}}' \
  -H 'Content-Type: application/json' \
  {{#if jwtVerification}}-H 'Authorization: Bearer your-jwt-token' \{{/if}}
  -d '{"message": "Hello World", "data": {"key": "value"}}'

{{#if rateLimit}}
# Test rate limiting (send multiple requests quickly)
for i in {1..15}; do
  curl -s 'http://localhost:54321/functions/v1/{{functionNameKebab}}' && echo
done
{{/if}}
```

## Deployment

### Deploy to Supabase

```bash
# Deploy the function
supabase functions deploy {{functionNameKebab}}

# Deploy with custom environment variables
supabase functions deploy {{functionNameKebab}} --no-verify-jwt
```

### Deploy with Import Maps (for dependencies)

The function uses ESM imports for dependencies. Supabase automatically handles these, but you can customize via `deno.json`:

```json
{
  "imports": {
    "supabase": "https://esm.sh/@supabase/supabase-js@2"{{#if jwtVerification}},
    "djwt": "https://deno.land/x/djwt@v3.0.0/mod.ts"{{/if}}
  }
}
```

## API Documentation

### Endpoints

#### GET /

Returns basic information and supports pagination.

**Query Parameters:**
- `limit` (number, optional): Number of records to return (default: 10)
- `offset` (number, optional): Number of records to skip (default: 0)

**Response:**
```json
{
  "data": [...],
  "pagination": {
    "limit": 10,
    "offset": 0,
    "total": 100
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}
```

#### POST /

Create or process data.

**Request Body:**
```json
{
  "message": "string",
  "data": "object"
}
```

**Response:**
```json
{
  "success": true,
  "data": {...},
  "timestamp": "2024-01-01T00:00:00.000Z"
}
```

### Error Responses

All error responses follow this format:

```json
{
  "error": "Error description",
  "requestId": "uuid-v4",
  "timestamp": "2024-01-01T00:00:00.000Z"
}
```

**HTTP Status Codes:**
{{#if rateLimit}}
- `429`: Rate limit exceeded
{{/if}}
{{#if jwtVerification}}
- `401`: Invalid or missing JWT token
{{/if}}
- `400`: Bad request (invalid JSON, validation errors)
- `405`: Method not allowed
- `415`: Unsupported media type
- `500`: Internal server error
- `501`: Method not implemented

## Database Schema

{{#if supabaseIntegration}}
If using Supabase integration, ensure your database has the required tables:

```sql
-- Example table (customize for your needs)
CREATE TABLE your_table_name (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  {{#if jwtVerification}}
  user_id UUID REFERENCES auth.users(id),
  {{/if}}
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  -- Add your custom fields here
  data JSONB
);

-- RLS policies (customize for your security requirements)
ALTER TABLE your_table_name ENABLE ROW LEVEL SECURITY;

{{#if jwtVerification}}
CREATE POLICY "Users can read own records" ON your_table_name
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own records" ON your_table_name
  FOR INSERT WITH CHECK (auth.uid() = user_id);
{{/if}}
```
{{/if}}

## Security Considerations

{{#if jwtVerification}}
- **JWT Verification**: All authenticated endpoints verify JWT tokens
- **User Context**: Authenticated user information is available in request handlers
{{/if}}
{{#if rateLimit}}
- **Rate Limiting**: Basic in-memory rate limiting is implemented
  - For production, consider using Redis or similar external store
  - Current limit: 10 requests per minute per IP
{{/if}}
{{#if cors}}
- **CORS**: Configured for origins: {{corsOrigins}}
  - Customize `corsOrigins` in the template configuration
{{/if}}
{{#if supabaseIntegration}}
- **Database Security**: Uses Supabase RLS (Row Level Security)
- **API Keys**: Never expose service role keys in client-side code
{{/if}}

## Performance Notes

- **Cold Starts**: Functions may experience cold starts after periods of inactivity
- **Memory Limits**: Edge Functions have memory constraints
- **Timeout**: Functions timeout after {{defaultTimeout}} seconds by default
{{#if supabaseIntegration}}
- **Connection Pooling**: Supabase handles PostgreSQL connection pooling automatically
- **PostgREST**: Database queries go through PostgREST API, not direct PostgreSQL connections
{{/if}}

## Troubleshooting

### Common Issues

1. **CORS Errors**: Check that your client origin is included in `corsOrigins`
2. **Environment Variables**: Ensure all required variables are set in Supabase dashboard
{{#if jwtVerification}}
3. **JWT Errors**: Verify that JWT_SECRET matches your token issuer
{{/if}}
{{#if supabaseIntegration}}
4. **Database Errors**: Check RLS policies and table permissions
{{/if}}

### Debugging

```bash
# View function logs
supabase functions logs {{functionNameKebab}}

# Stream logs in real-time
supabase functions logs {{functionNameKebab}} --follow
```

### Performance Monitoring

The function includes built-in performance logging:
- Request duration tracking
- Memory usage (via Deno APIs)
- Error rate monitoring

## Development Guidelines

### Web API Only
This function uses only Web APIs compatible with the Deno runtime:
- ✅ `fetch()`, `Request`, `Response`, `Headers`
- ✅ `URL`, `URLSearchParams`
- ✅ `JSON`, `crypto`
- ✅ `console`, `performance`
- ❌ No Node.js built-ins (`fs`, `process`, `path`, etc.)

### Code Organization
- Keep handlers focused and single-purpose
- Use TypeScript for better development experience
- Validate inputs early and provide clear error messages
- Log important events for debugging

## Contributing

When modifying this function:
1. Maintain Web API compatibility
2. Update this README with any new features
3. Test locally before deploying
4. Consider security implications of changes

---

Generated by DATA CLI v{{version}} | Last updated: {{timestamp}}