// {{description}}
// Generated by DATA CLI on {{timestamp}}
// Runtime: Deno {{denoVersion}}
// Web API Only - No Node.js built-ins

{{#if supabaseIntegration}}
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
{{/if}}

{{#if jwtVerification}}
import { verify } from 'https://deno.land/x/djwt@v3.0.0/mod.ts'
{{/if}}

{{#if cors}}
// CORS configuration
const corsHeaders = {
  'Access-Control-Allow-Origin': '{{corsOrigins.0}}',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
}
{{/if}}

{{#if supabaseIntegration}}
// Supabase client initialization
// Uses PostgREST API for database access (no direct PostgreSQL connection)
const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Missing required environment variables: SUPABASE_URL, SUPABASE_ANON_KEY')
}

const supabase = createClient(supabaseUrl, supabaseKey)
{{/if}}

{{#if rateLimit}}
// Simple in-memory rate limiter (use external store in production)
const rateLimitStore = new Map<string, { count: number; resetTime: number }>()
const RATE_LIMIT_WINDOW = 60000 // 1 minute
const RATE_LIMIT_MAX = 10 // 10 requests per minute

function checkRateLimit(identifier: string): boolean {
  const now = Date.now()
  const record = rateLimitStore.get(identifier)
  
  if (!record || now > record.resetTime) {
    rateLimitStore.set(identifier, { count: 1, resetTime: now + RATE_LIMIT_WINDOW })
    return true
  }
  
  if (record.count >= RATE_LIMIT_MAX) {
    return false
  }
  
  record.count++
  return true
}
{{/if}}

{{#if jwtVerification}}
// JWT verification helper
async function verifyToken(authHeader: string | null): Promise<any> {
  if (!authHeader?.startsWith('Bearer ')) {
    throw new Error('Invalid authorization header format')
  }
  
  const token = authHeader.slice(7)
  const secret = Deno.env.get('JWT_SECRET')
  
  if (!secret) {
    throw new Error('JWT_SECRET not configured')
  }
  
  return await verify(token, secret)
}
{{/if}}

/**
 * Main Edge Function handler
 * Processes HTTP requests using Web APIs only
 */
Deno.serve(async (req: Request): Promise<Response> => {
  {{#if logging}}
  const startTime = performance.now()
  const { method, url } = req
  const userAgent = req.headers.get('User-Agent') || 'unknown'
  
  console.log(`[${new Date().toISOString()}] {{functionName}}: ${method} ${url} (${userAgent})`)
  {{/if}}

  {{#if cors}}
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { 
      status: 200,
      headers: corsHeaders 
    })
  }
  {{/if}}

  try {
    {{#if rateLimit}}
    // Rate limiting check
    const clientIP = req.headers.get('x-forwarded-for') || 
                    req.headers.get('x-real-ip') || 
                    'unknown'
    
    if (!checkRateLimit(clientIP)) {
      {{#if logging}}
      console.warn(`Rate limit exceeded for IP: ${clientIP}`)
      {{/if}}
      return new Response(
        JSON.stringify({ 
          error: 'Rate limit exceeded',
          retryAfter: Math.ceil(RATE_LIMIT_WINDOW / 1000)
        }),
        { 
          status: 429,
          headers: { 
            'Content-Type': 'application/json',
            'Retry-After': String(Math.ceil(RATE_LIMIT_WINDOW / 1000)),
            {{#if cors}}...corsHeaders{{/if}}
          }
        }
      )
    }
    {{/if}}

    {{#if jwtVerification}}
    // JWT token verification
    let user: any = null
    try {
      user = await verifyToken(req.headers.get('Authorization'))
      {{#if logging}}
      console.log(`Authenticated user: ${user.sub || user.id}`)
      {{/if}}
    } catch (error) {
      {{#if logging}}
      console.warn('JWT verification failed:', error.message)
      {{/if}}
      return new Response(
        JSON.stringify({ error: 'Invalid or expired token' }),
        { 
          status: 401,
          headers: { 
            'Content-Type': 'application/json',
            {{#if cors}}...corsHeaders{{/if}}
          }
        }
      )
    }
    {{/if}}

    // Route handling
    switch (req.method) {
      case 'GET':
        return await handleGet(req)
      
      case 'POST':
        return await handlePost(req{{#if jwtVerification}}, user{{/if}})
      
      case 'PUT':
        return await handlePut(req{{#if jwtVerification}}, user{{/if}})
      
      case 'DELETE':
        return await handleDelete(req{{#if jwtVerification}}, user{{/if}})
      
      default:
        return new Response(
          JSON.stringify({ error: 'Method not allowed' }),
          { 
            status: 405,
            headers: { 
              'Content-Type': 'application/json',
              'Allow': 'GET, POST, PUT, DELETE, OPTIONS',
              {{#if cors}}...corsHeaders{{/if}}
            }
          }
        )
    }

  } catch (error) {
    {{#if errorHandling}}
    {{#if logging}}
    console.error('{{functionName}} error:', {
      message: error.message,
      stack: error.stack,
      url: req.url,
      method: req.method
    })
    {{/if}}
    
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        requestId: crypto.randomUUID(),
        timestamp: new Date().toISOString()
      }),
      { 
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          {{#if cors}}...corsHeaders{{/if}}
        }
      }
    )
    {{/if}}
  } finally {
    {{#if logging}}
    const duration = performance.now() - startTime
    console.log(`Request completed in ${duration.toFixed(2)}ms`)
    {{/if}}
  }
})

/**
 * Handle GET requests
 */
async function handleGet(req: Request): Promise<Response> {
  const url = new URL(req.url)
  const params = url.searchParams

  {{#if supabaseIntegration}}
  // Example: Fetch data from Supabase
  const limit = parseInt(params.get('limit') || '10', 10)
  const offset = parseInt(params.get('offset') || '0', 10)

  const { data, error, count } = await supabase
    .from('your_table_name')
    .select('*', { count: 'exact' })
    .range(offset, offset + limit - 1)

  if (error) {
    {{#if logging}}
    console.error('Database query error:', error)
    {{/if}}
    return new Response(
      JSON.stringify({ error: 'Failed to fetch data' }),
      { 
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          {{#if cors}}...corsHeaders{{/if}}
        }
      }
    )
  }

  return new Response(
    JSON.stringify({
      data: data || [],
      pagination: {
        limit,
        offset,
        total: count || 0
      },
      timestamp: new Date().toISOString()
    }),
    { 
      status: 200,
      headers: { 
        'Content-Type': 'application/json',
        {{#if cors}}...corsHeaders{{/if}}
      }
    }
  )
  {{/if}}

  // Basic GET response without Supabase
  return new Response(
    JSON.stringify({
      message: 'Hello from {{functionName}}!',
      method: 'GET',
      timestamp: new Date().toISOString(),
      query: Object.fromEntries(params.entries())
    }),
    { 
      status: 200,
      headers: { 
        'Content-Type': 'application/json',
        {{#if cors}}...corsHeaders{{/if}}
      }
    }
  )
}

/**
 * Handle POST requests
 */
async function handlePost(req: Request{{#if jwtVerification}}, user?: any{{/if}}): Promise<Response> {
  {{#if validation}}
  // Validate Content-Type
  const contentType = req.headers.get('Content-Type')
  if (!contentType?.includes('application/json')) {
    return new Response(
      JSON.stringify({ error: 'Content-Type must be application/json' }),
      { 
        status: 415,
        headers: { 
          'Content-Type': 'application/json',
          {{#if cors}}...corsHeaders{{/if}}
        }
      }
    )
  }
  {{/if}}

  let body: any
  try {
    body = await req.json()
  } catch (error) {
    return new Response(
      JSON.stringify({ error: 'Invalid JSON in request body' }),
      { 
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          {{#if cors}}...corsHeaders{{/if}}
        }
      }
    )
  }

  {{#if validation}}
  // Basic validation
  if (!body || typeof body !== 'object') {
    return new Response(
      JSON.stringify({ error: 'Request body must be a JSON object' }),
      { 
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          {{#if cors}}...corsHeaders{{/if}}
        }
      }
    )
  }
  {{/if}}

  {{#if supabaseIntegration}}
  // Example: Insert data into Supabase
  const { data, error } = await supabase
    .from('your_table_name')
    .insert([{
      ...body,
      {{#if jwtVerification}}
      user_id: user?.sub || user?.id,
      {{/if}}
      created_at: new Date().toISOString()
    }])
    .select()

  if (error) {
    {{#if logging}}
    console.error('Database insert error:', error)
    {{/if}}
    return new Response(
      JSON.stringify({ error: 'Failed to create record' }),
      { 
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          {{#if cors}}...corsHeaders{{/if}}
        }
      }
    )
  }

  return new Response(
    JSON.stringify({
      success: true,
      data: data?.[0],
      timestamp: new Date().toISOString()
    }),
    { 
      status: 201,
      headers: { 
        'Content-Type': 'application/json',
        {{#if cors}}...corsHeaders{{/if}}
      }
    }
  )
  {{/if}}

  // Basic POST response without Supabase
  return new Response(
    JSON.stringify({
      message: 'Data received successfully',
      receivedData: body,
      {{#if jwtVerification}}
      user: user ? { id: user.sub || user.id } : null,
      {{/if}}
      timestamp: new Date().toISOString()
    }),
    { 
      status: 201,
      headers: { 
        'Content-Type': 'application/json',
        {{#if cors}}...corsHeaders{{/if}}
      }
    }
  )
}

/**
 * Handle PUT requests
 */
async function handlePut(req: Request{{#if jwtVerification}}, user?: any{{/if}}): Promise<Response> {
  return new Response(
    JSON.stringify({ error: 'PUT method not implemented yet' }),
    { 
      status: 501,
      headers: { 
        'Content-Type': 'application/json',
        {{#if cors}}...corsHeaders{{/if}}
      }
    }
  )
}

/**
 * Handle DELETE requests
 */
async function handleDelete(req: Request{{#if jwtVerification}}, user?: any{{/if}}): Promise<Response> {
  return new Response(
    JSON.stringify({ error: 'DELETE method not implemented yet' }),
    { 
      status: 501,
      headers: { 
        'Content-Type': 'application/json',
        {{#if cors}}...corsHeaders{{/if}}
      }
    }
  )
}